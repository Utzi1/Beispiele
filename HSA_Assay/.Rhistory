pred(verd) %>%
line()
plot(log(verd), Ja_in_Pro)
pred(verd) %>%
line()
line(pred(x), Ja_in_Pro)
library(tidyverse)
Ja_in_Pro <- c(100, 12.5, 100, 62.5, 50, 100, 12.5, 75, 62 )
verd  <- c(22.37, 194, 93, 164, 172, 50, 295, 119, 141)
daten <- tibble(
sort(Ja_in_Pro),
sort(verd)
)
modell  <- lm(Ja_in_Pro~log10(verd))
summary(modell)
pred <- function(x){coefficints(modell)[[2]] + x * 10 ^ coefficients(modell)[[1]] }
plot(log(verd), Ja_in_Pro)
line(pred(x), Ja_in_Pro)
pred <- function(x){coefficients(modell)[[2]] + x * 10 ^ coefficients(modell)[[1]] }
plot(log(verd), Ja_in_Pro)
line(pred(x), Ja_in_Pro)
line(pred(verd), Ja_in_Pro)
plot(log(verd), Ja_in_Pro)
line(pred(verd), Ja_in_Pro)
plot(pred(verd), Ja_in_Pro)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_smooth()
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_smooth(method = lm)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_smooth(method = modell)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_smooth(method = "modell")
plot(log(verd), Ja_in_Pro)
abline(fit)
abline(modell)
plot(log(verd), Ja_in_Pro)
abline(modell)
library(nlme, lib.loc = "/usr/lib/R/library")
logDet(modelll)
logDet(modell)
logDet(verd)
logDet(e)
logDet(10)
logDet(daten)
logLik.gnls(daten)
logLik.gnls
logLik.gnls()
logLik(modell)
pred <- pred(Ja_in_Pro)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_smooth(method = )
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()
pred <- pred(Ja_in_Pro) %>%
plot()
library(tidyverse)
Ja_in_Pro <- c(100, 12.5, 100, 62.5, 50, 100, 12.5, 75, 62 )
verd  <- c(22.37, 194, 93, 164, 172, 50, 295, 119, 141)
daten <- tibble(
sort(Ja_in_Pro),
sort(verd)
)
modell  <- lm(Ja_in_Pro~log10(verd))
summary(modell)
pred <- function(x){coefficients(modell)[[2]] + x * 10 ^ coefficients(modell)[[1]] }
pred <- pred(Ja_in_Pro) %>%
plot()
pred <- pred(Ja_in_Pro) %>%
boxplot()
pred <- function(x){coefficients(modell)[[2]] + x * 10 ^ coefficients(modell)[[1]] }
pred <- pred(Ja_in_Pro) %>%
boxplot()
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_point(log10(verd), pred)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_point(log10(verd), pred)
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_point(aes(log10(verd), pred))
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_point(aes(verd, pred))
ggplot(mapping = aes(log10(verd), Ja_in_Pro), data = daten)+
geom_point()+
geom_point(aes(verd, pred))
length(pred)
pred <- function(x){coefficients(modell)[[2]] + x * 10 ^ coefficients(modell)[[1]] }
pred <- pred(Ja_in_Pro) %>%
boxplot()
length(pred)
pred <- function(x){coefficients(modell)[[2]] + x * coefficients(modell)[[1]] }
pred <- pred(Ja_in_Pro) %>%
boxplot()
length(pred)
hist(Ja_in_Pro)
hist(daten$`sort(Ja_in_Pro)`)
hist(daten$`sort(Ja_in_Pro)`, nclass = 1)
hist(daten$`sort(Ja_in_Pro)`, nclass = 8)
hist(daten$`sort(Ja_in_Pro)`, nclass = 9)
hist(Ja_in_Pro, nclass = 9)
hist(verd, nclass = 9)
library(MASS)
# generate a million lognormal samples
n <- 1000000
dat <- rlnorm(n, meanlog = 0, sdlog = 1)
# add some noise (optional)
dat <- dat + runif(n, 0, 1)
# create a vector of histogram breaks
x <- seq(0,max(dat),length=700)
# histogram the data
hst <- hist(dat, breaks=x)
# fit a lognormal distribution
fit_params <- fitdistr(dat,"lognormal")
# generate values given our fit parameters
fit <- dlnorm(x, fit_params$estimate['meanlog'], fit_params$estimate['sdlog'])
# plot the fit and original distributions
plot(x, fit, type="l", ylab="Density",
xlab="X", ylim=c(0,max(hst$density)), xlim=c(0,10))
title(main = "Density histogram with lognormal fit")
lines(hst$mid, hst$density, type="l", col="red")
legend(8,0.15,legend=c("Fit","Data"),lty=c(1,1),col=c("black","red"))
# create a vector of quantiles
quants <-seq(0,1,length=81)[2:80]
# find quantiles for the fitted distribution
fit_quants <- qlnorm(quants,fit_params$estimate['meanlog'], fit_params$estimate['sdlog'])
# find quantiles of the original data
data_quants <- quantile(dat,quants)
# fit and data quantiles side by side
data.frame(fit_quants,data_quants)
# create Q-Q plot
plot(fit_quants, data_quants, xlab="Theoretical Quantiles", ylab="Sample Quantiles")
title(main = "Q-Q plot of lognormal fit against data")
abline(0,1)
# generate a million lognormal samples
n <- 1000000
dat <- rlnorm(n, meanlog = 0, sdlog = 1)
# add some noise (optional)
dat <- dat + runif(n, 0, 1)
# create a vector of histogram breaks
x <- seq(0,max(dat),length=700)
# histogram the data
hst <- hist(dat, breaks=x)
# fit a lognormal distribution
fit_params <- fitdistr(dat,"lognormal")
# generate values given our fit parameters
fit <- dlnorm(x, fit_params$estimate['meanlog'], fit_params$estimate['sdlog'])
# plot the fit and original distributions
plot(x, fit, type="l", ylab="Density",
xlab="X", ylim=c(0,max(hst$density)), xlim=c(0,10))
title(main = "Density histogram with lognormal fit")
lines(hst$mid, hst$density, type="l", col="red")
legend(8,0.15,legend=c("Fit","Data"),lty=c(1,1),col=c("black","red"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(MASS)
Cd_19 <- tibble(
"ConcRest" = c(.448, 1.218, 1.984, 3.56, 6.21, 9.125, 12.52, 15.12),
"qCd/Alge" = c(..2743, .503, .733, .854, .828, .765, .635, .61)
)
Cd_19 <- tibble(
"ConcRest" = c(.448, 1.218, 1.984, 3.56, 6.21, 9.125, 12.52, 15.12),
"qCd/Alge" = c(.2743, .503, .733, .854, .828, .765, .635, .61)
)
ggplot(mapping = aes(ConcRest, qCd/Alge), data=Cd_19)
ggplot(mapping = aes(Cd_19$ConcRest, `qCd/Alge`), data=Cd_19)
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()+
geom_histogram()
hist(Cd_19$ConcRest)
hist(Cd_19$ConcRest, nclass = 8)
hist(Cd_19$ConcRest, nclass = 9)
Cd_19 <- tibble(
"ConcRest" = c(.448, 1.218, 1.984, 3.56, 6.21, 9.125, 12.52, 15.12),
"qCd/Alge" = c(.2743, .503, .733, .854, .828, .765, .635, .61)
)
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()+
geom_smooth()
Cd_19 <- tibble(
"ConcRest" = c(.448, 1.218, 1.984, 3.56, 6.21, 9.125, 12.52, 15.12),
"qCd/Alge" = c(.2743, .503, .733, .854, .828, .765, .635, .61),
"Absolut" = Cd_19$ConcRest * Cd_19$`qCd/Alge`
)
hist(Cd_19$Absolut)
hist(Cd_19$Absolut, nclass = 9)
df<-data.frame(x=c(1100,800,600,550,500,350),y=c(0.05,0.17,0.91,0.95,1,0.13))
opt <- optim(c(1, 1, 1), function(p) sum((dlnorm(df$x, p[1], p[2]) * p[3] - df$y)^2))
plot(x = df$x, y = df$y, type = 'b', ylim = c(0, 1), xlim = c(0, 1100))
df<-data.frame(x=c(1100,800,600,550,500,350),y=c(0.05,0.17,0.91,0.95,1,0.13))
opt <- optim(c(1, 1, 1), function(p) sum((dlnorm(df$x, p[1], p[2]) * p[3] - df$y)^2))
curve(opt$par[3] * dlnorm(x, opt$par[1], opt$par[2]), from = 0, to = 1100, add = TRUE, col = 'red'
df<-data.frame(x=c(1100,800,600,550,500,350),y=c(0.05,0.17,0.91,0.95,1,0.13))
df<-data.frame(x=c(1100,800,600,550,500,350),y=c(0.05,0.17,0.91,0.95,1,0.13))
opt <- optim(c(1, 1, 1), function(p) sum((dlnorm(df$x, p[1], p[2]) * p[3] - df$y)^2))
opt$par
plot(x = df$x, y = df$y, type = 'b', ylim = c(0, 1), xlim = c(0, 1100))
curve(opt$par[3] * dlnorm(x, opt$par[1], opt$par[2]), from = 0, to = 1100, add = TRUE, col = 'red'
plnorm(Cd_19$ConcRest)
plnorm(ConcRest, data=Cd_19)
plnorm(ConcRest)
dlnorm(Cd_19$ConcRest)
install.packages("lognorm")
library(lognorm)
library(lognorm)
lognorm::estimateParmsLognormFromSample(Cd_19$`qCd/Alge`)
params <- lognorm::estimateParmsLognormFromSample(Cd_19$`qCd/Alge`)
print(params)
dlnorm(Cd_19$ConcRest, meanlog = params[[1]], sdlog = params[[2]])
plnorm(Cd_19$ConcRest, meanlog = params[[1]], sdlog = params[[2]])
rlnorm(Cd_19$ConcRest, meanlog = params[[1]], sdlog = params[[2]])
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()+
geom_point(mapping = aes(rlnorm(Cd_19$ConcRest, meanlog = params[[1]], sdlog = params[[2]]), `qCd/Alge`))
ggplot(mapping = aes(ConcRest, `qCd/Alge`), data=Cd_19)+
geom_point()+
geom_point(mapping = aes(rlnorm(Cd_19$ConcRest, meanlog = params[[1]], sdlog = params[[2]]) ~ `qCd/Alge`))
rlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
rlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]]) %>%
plot()
simul <- rlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
plot(Cd_19$ConcRest, simul)
dlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
plot(Cd_19$ConcRest,dlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]]) )
plnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
plot(Cd_19$ConcRest,dlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]]) )
params <- lognorm::estimateParmsLognormFromSample(Cd_19$`qCd/Alge`)
print(params)
plnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
plot(Cd_19$ConcRest,dlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]]) )
fit_params <- fitdistr(Cd_19$ConcRest, "gamma", lower = c (0, 0))
fit_params
ggplot(data = dat, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3) +
geom_line(aes(x=dat$x, y=dgamma(dat$x,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1)
ggplot(data = dat, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3) +
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1)
ggplot(data = dat, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)
ggplot()+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit.params$estimate["shape"], fit.params$estimate["rate"])), color="red", size = 1)
params <- lognorm::estimateParmsLognormFromSample(Cd_19$`qCd/Alge`)
print(params)
plnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
plot(Cd_19$ConcRest,dlnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]]) )
fit_params <- fitdistr(Cd_19$ConcRest, "gamma", lower = c (0, 0))
print(fit_params)
dgamma( Cd_19$ConcRest , shape = fit.params$estimate["shape"], rate = fit.params$estimate["rate"] )
fit_params <- fitdistr(Cd_19$ConcRest, "gamma", lower = c (0, 0))
print(fit_params)
dgamma( Cd_19$ConcRest , shape = fit.params$estimate["shape"], rate = fit.params$estimate["rate"] )
dgamma( Cd_19$ConcRest , shape = fit_params$estimate["shape"], rate = fit_params$estimate["rate"] )
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit_params$estimate["shape"], fit_params$estimate["rate"])), color="red", size = 1)
fit_params <- fitdistr(Cd_19$ConcRest, "gamma")
print(fit_params)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit_params$estimate["shape"], fit_params$estimate["rate"])), color="red", size = 1)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$`qCd/Alge`,fit_params$estimate["shape"], fit_params$estimate["rate"])), color="red", size = 1)
plnorm(Cd_19$`qCd/Alge`, meanlog = params[[1]], sdlog = params[[2]])
fit_params <- fitdistr(Cd_19$ConcRest, "gamma") # fit
print(fit_params)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit_params$estimate["shape"], fit_params$estimate["rate"])), color="red", size = 1)
fit_params <- fitdistr(Cd_19$ConcRest, "gamma") # fit
print(fit_params)
ggplot(data = Cd_19, aes(x = Cd_19$ConcRest, y = Cd_19$`qCd/Alge`)) +
geom_point(size = 3)+
geom_line(aes(x=Cd_19$ConcRest, y=dgamma(x=Cd_19$ConcRest,fit_params$estimate["shape"], fit_params$estimate["rate"])), color="red", size = 1)
Cd_19 <- tibble(
"ConcRest" = c(.448, 1.218, 1.984, 3.56, 6.21, 9.125, 12.52, 15.12),
"qCd/Alge" = c(.2743, .503, .733, .854, .828, .765, .635, .61)
)
A4 <- read.csv("~/Downloads/A4.csv", header=FALSE, comment.char="#")
View(A4)
A4 <- read.csv("~/Downloads/A4.csv", header=FALSE, comment.char="#")
A4 <- read.csv("~/Downloads/A4.csv", header=FALSE, comment.char="#", NA_integer_)
A4 <- read.csv("~/Downloads/A4.csv", header=FALSE, comment.char="#")
summary(A4)
plot(A4$V1, A4$V3)
library(readr)
A4 <- read_csv("Downloads/A4.csv", locale = locale(date_names = "de"),
na = "0")
View(A4)
A4 <- read_csv("Downloads/A4.csv", locale = locale(date_names = "de"),  na = "0")
plot(A4$`nm \ A`, A4$`Floureszentintensit�t`)
Lambda <- A4$`nm \ A`
library(readxl)
Dansyl_AS <- read_excel("Downloads/Dansyl-AS.xlsx",
col_types = c("numeric", "numeric", "numeric",
"numeric"))
View(Dansyl_AS)
Dansyl_AS <- read_excel("Downloads/Dansyl-AS.xlsx", col_types = c("numeric", "numeric", "numeric", "numeric"))
plot(Dansyl_AS$lambda, Dansyl_AS$Abs)
line(Dansyl_AS$lambda, Dansyl_AS$Abs)
line(Dansyl_AS$lambda, Dansyl_AS$Abs)
ggplot2::ggplot(mapping = ggplot::aes(Dansyl_AS$lambda, Dansyl_AS$Abs))+
ggplot2::geom_line()
ggplot2::ggplot(mapping = ggplot::aes(Dansyl_AS$lambda, Dansyl_AS$Abs))+
ggplot2::geom_line()
ggplot2::ggplot(mapping = ggplot2::aes(Dansyl_AS$lambda, Dansyl_AS$Abs))+
ggplot2::geom_line()
library(readxl)
HSA <- read_excel("Bachelor/Paket_BHT/Methoden_generell/HSA/HSA.xlsx",
sheet = "Tabelle2")
View(HSA)
# laden von biotech
library(devtools)
load_all(path = "../../Biotech")
# Laden des Datensatz
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
# Laden des Datensatz
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
# laden von biotech
library(devtools)
load_all(path = "../../Biotech")
setwd("Bachelor/Paket_BHT/Beispielauswertungen/HSA_Assay/")
# laden von biotech
library(devtools)
load_all(path = "../../Biotech")
# Laden des Datensatz
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
HSA <- mutate(HSA, Std=((HSA[2] + HSA$s3 + HSA$s4) / 3))
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA <- mutate(HSA, Std=((HSA[2] + HSA$s3 + HSA$s4) / 3))
# Laden des Datensatz
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
HSA <- mutate(HSA, Std=((HSA[2] + HSA$s3 + HSA$s4) / 3))
HSA <- mutate(HSA, Std=((HSA[,c(2)] + HSA$s3 + HSA$s4) / 3))
HSA[,c(2)]
HSA[,c(3)]
# Laden des Datensatz
library(readxl)
# laden von biotech
library(devtools)
load_all(path = "../../Biotech")
# Laden des Datensatz
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA.2 <- mutate(HSA, Std=((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3))
HSA.2 <- mutate(HSA, "Std" =((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3))
HSA <- tibbe(read_excel("HSA.xlsx", sheet = "Tabelle2"))
# Laden des Datensatz
library(dplyr)
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA.2 <- mutate( HSA, "Std" = ((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3) )
HSA <- tibble(read_excel("HSA.xlsx", sheet = "Tabelle2"))
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA.2 <- mutate( HSA, "Std" = ((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3) )
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA.2 <- mutate( HSA, "Std" = ((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3) )
HSA.2 <- mutate( HSA, "Std"=((HSA[,c(3)] + HSA[,c(4)] + HSA[,c(5)]) / 3) )
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
View(HSA)
View(HSA)
HSA
HSA.2 <- mutate( HSA, "Std"=((HSA[,(3)] + HSA[,(4)] + HSA[,(5)]) / 3) )
HSA.2 <- mutate( HSA, "Std"=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA.2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
# laden von biotech
library(devtools)
load_all(path = "../../Biotech")
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA.2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA2 <- mutate( HSA, Std=numeric((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
select(HSA, 2:4)
HSA2 <- mutate( HSA, select(3:3)) / 3) )
HSA2 <- mutate( HSA, select(3:3)) / 3)
HSA2 <- mutate( HSA, select(3:4)) / 3)
HSA2 <- mutate( HSA, select(HSA, 3:4)) / 3)
HSA2 <- mutate( HSA, select(HSA, 3:4) / 3)
HSA <- mutate(HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
select(HSA, 2:4)
HSA <- mutate(HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA.1 <- mutate(HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
HSA2 <- mutate( HSA, "Std"=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
HSA2 <- mutate( HSA, Std=((HSA[,3] + HSA[,4] + HSA[,5]) / 3) )
select(HSA, 3:4)
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA.1 <- mutate(HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
select(HSA, 3:4)
View(HSA)
View(HSA)
select(HSA, 3:5)
select(HSA, 3:5) %>%
mean()
select(HSA, 3:5) %>%
mean()
select(HSA, 3:5) %>%
cummean()
select(HSA, 3:5) %>%
cummean()
select(HSA, 3:5) %>%
cummean()
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA.1 <- (HSA, "Std"=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
select(HSA, 3:5) %>%
cummean()
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
select(HSA, 3:5) %>%
cummean()
mean(select(HSA, 3:5))
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
summary(HSA)
# 2, 3, 4 sind die Standards
library(tidyverse)
mean(select(HSA, 3:5))
# 2, 3, 4 sind die Standards
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
